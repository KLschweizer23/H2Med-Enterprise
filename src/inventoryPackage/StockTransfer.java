package inventoryPackage;

import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.Set;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import myUtilities.MessageHandler;
import myUtilities.SystemUtilities;

/**
 *
 * @author KL_Schweizer
 */
public class StockTransfer extends javax.swing.JFrame {

    private DefaultTableModel dtm;
    private DefaultTableModel dtm2;
    
    private HashMap<String, String> tableMap;
    private HashMap<Integer, String> idTableMap;
    private HashMap<String, ItemObject> fromItems;
    private HashMap<String, ItemObject> toItems = new HashMap<>();
    
    private int rowHeight = 30;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combo_from = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_from = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_to = new javax.swing.JTable();
        combo_to = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        button_cancel = new javax.swing.JButton();
        button_apply = new javax.swing.JButton();
        textField_search = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        combo_from.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_fromActionPerformed(evt);
            }
        });

        table_from.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_from.setFocusable(false);
        table_from.setRequestFocusEnabled(false);
        table_from.setSelectionBackground(new java.awt.Color(177, 0, 0));
        table_from.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_from.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_from.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_from.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(table_from);

        table_to.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_to.setEnabled(false);
        table_to.setFocusable(false);
        table_to.setRequestFocusEnabled(false);
        table_to.setSelectionBackground(new java.awt.Color(177, 0, 0));
        table_to.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_to.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_to.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_to.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(table_to);

        combo_to.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("From:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("To:");

        button_cancel.setText("Cancel");
        button_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_cancelActionPerformed(evt);
            }
        });

        button_apply.setText("Apply Transfer");
        button_apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_applyActionPerformed(evt);
            }
        });

        textField_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textField_searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo_from, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textField_search)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo_to, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(button_apply)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_cancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(textField_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_cancel)
                    .addComponent(button_apply))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combo_fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_fromActionPerformed
        processToLists();
        processFromTable();
    }//GEN-LAST:event_combo_fromActionPerformed

    private void textField_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textField_searchKeyReleased
        processTableItem(table_from, dtm, combo_from.getSelectedIndex(), fromItems);
    }//GEN-LAST:event_textField_searchKeyReleased

    private void button_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_cancelActionPerformed
        dispose();
    }//GEN-LAST:event_button_cancelActionPerformed

    private void button_applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_applyActionPerformed
        for(String key : tableMap.keySet())
            if(tableMap.get(key).equals(combo_to.getSelectedItem().toString()))
                processTransfer(key);
    }//GEN-LAST:event_button_applyActionPerformed
    private void processTransfer(String tableKey)
    {
        InventoryDatabaseManager inventoryDb = new InventoryDatabaseManager();
        MessageHandler mh = new MessageHandler();
        
        HashMap<String, ItemObject> existingStocks = inventoryDb.processData(tableKey, tableMap.get(tableKey), "", "I_ID");
        for(String key : toItems.keySet())
        {
            if(existingStocks.containsKey(toItems.get(key).getI_id()))
                inventoryDb.addStocks(tableKey, tableMap.get(tableKey), toItems.get(key).getI_id(), toItems.get(key).getStocksLeft() + existingStocks.get(toItems.get(key).getI_id()).getStocksLeft());
            else
                inventoryDb.insertItem(tableKey, tableMap.get(tableKey), toItems.get(key));
            
            int stocksTaken = toItems.get(key).getStocksLeft();
            ItemObject io = fromItems.get(key);
            io.setStocksLeft(io.getStocksLeft() - stocksTaken);
            inventoryDb.updateItem(idTableMap.get(combo_from.getSelectedIndex()), tableMap.get(idTableMap.get(combo_from.getSelectedIndex())), io);
        }
        mh.message("Data has successfully transfered!");
        dispose();
    }
    private void createFromColumns()
    {
        dtm = new DefaultTableModel(0,0)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };
        dtm.addColumn("Id");
        dtm.addColumn("I_ID");
        dtm.addColumn("Item");
        dtm.addColumn("Article");
        dtm.addColumn("Brand");
        dtm.addColumn("Price");
        dtm.addColumn("Stocks Left");
        table_from.setModel(dtm);
        
        TableColumnModel tcm = table_from.getColumnModel();
        table_from.removeColumn(tcm.getColumn(0));
        table_from.removeColumn(tcm.getColumn(0));
        createToColumns();
    }    
    private void createToColumns()
    {
        dtm2 = new DefaultTableModel(0,0)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };
        dtm2.addColumn("Id");
        dtm2.addColumn("I_ID");
        dtm2.addColumn("Item");
        dtm2.addColumn("Article");
        dtm2.addColumn("Brand");
        dtm2.addColumn("Price");
        dtm2.addColumn("Stocks Left");
        table_to.setModel(dtm2);
        
        TableColumnModel tcm = table_to.getColumnModel();
        table_to.removeColumn(tcm.getColumn(0));
        table_to.removeColumn(tcm.getColumn(0));
    }
    private void processFromLists()
    {
        InventoryDatabaseManager inventoryDb = new InventoryDatabaseManager();
        tableMap = inventoryDb.getTables();
        idTableMap = new HashMap<>();
        
        combo_from.addItem(" ");
        idTableMap.put(0, "0");
        
        int x = 1;
        for(String table : tableMap.keySet())
        {
            combo_from.addItem(tableMap.get(table));
            idTableMap.put(x++, table);
        }
    }
    private void processToLists()
    {
        boolean hasStore = combo_from.getSelectedIndex() != 0;
        combo_to.setEnabled(hasStore);
        table_to.setEnabled(hasStore);
        button_apply.setEnabled(hasStore);
        if(hasStore)
        {
            combo_to.removeAllItems();
            Set<Integer> set = idTableMap.keySet();
            set.remove(0);
            for(int idIndex : set)
                if(idIndex != combo_from.getSelectedIndex())
                    combo_to.addItem(tableMap.get(idTableMap.get(idIndex)));
        }
    }
    private void processFromTable()
    {
        int index = combo_from.getSelectedIndex();
        switch(index)
        {
            case 0: 
               removeData(table_from, dtm);
                break;
            default:
                processTableItem(table_from, dtm, index, fromItems);
                break;
        }
    }
    private void removeData(JTable table, DefaultTableModel dtmr)
    {
        table.removeAll();
        dtmr.setRowCount(0);
    }
    private void processTableItem(JTable table, DefaultTableModel dtmr, int idIndex, HashMap<String, ItemObject> referenceMap)
    {
        removeData(table, dtmr);
        
        InventoryDatabaseManager inventoryDb = new InventoryDatabaseManager();
        if(referenceMap == fromItems)
        {
            referenceMap = inventoryDb.processData(idTableMap.get(idIndex), tableMap.get(idTableMap.get(idIndex)), textField_search.getText(), "ID");
            fromItems = referenceMap;
        }
        
        for(String keys : referenceMap.keySet())
        {
            ItemObject io = referenceMap.get(keys);
            String[] rowData = {
                io.getId(),
                io.getI_id(),
                io.getItem(),
                io.getArticle(),
                io.getBrand(),
                io.getPrice(),
                io.getStocksLeft() + ""
            };
            dtmr.addRow(rowData);
        }
        SystemUtilities su = new SystemUtilities();
        su.setSelectionToZero(table, true);
        su.setHoverableTable(table);
        table.setRowHeight(rowHeight);
    }
    private void setupFromTable()
    {
        table_from.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Point p = e.getPoint();
                int y = p.y / rowHeight;
                if(y < dtm.getRowCount())
                    transferItem();
            }

            @Override
            public void mousePressed(MouseEvent arg0) {
                
            }

            @Override
            public void mouseReleased(MouseEvent arg0) {
                
            }

            @Override
            public void mouseEntered(MouseEvent arg0) {
                
            }

            @Override
            public void mouseExited(MouseEvent arg0) {
                
            }
        });
    }
    private void transferItem()
    {
        MessageHandler mh = new MessageHandler();
        if(combo_to == null || combo_to.getSelectedIndex() == 0)
        {
            SystemUtilities su = new SystemUtilities();

            String number = "";

            boolean pass = true;

            ItemObject oldIo = getSelectedItem(table_from, dtm);
            ItemObject io = new ItemObject();
            
            io.setId(oldIo.getId());
            io.setI_id(oldIo.getI_id());
            io.setItem(oldIo.getItem());
            io.setArticle(oldIo.getArticle());
            io.setBrand(oldIo.getBrand());
            io.setPrice(oldIo.getPrice());
            io.setStocksLeft(oldIo.getStocksLeft());
            
            do
            {
                number = su.inputNumberUser("Input stocks to transfer: ");
                pass = number == null || inputAllowed(io, number);
            }while(!pass);
            if(pass && number != null)
            {
                if(toItems.containsKey(io.getId()))
                {
                    int stocksAdded = toItems.get(io.getId()).getStocksLeft();
                    int stocksToAdd = Integer.parseInt(number);
                    int maximumStocks = fromItems.get(io.getId()).getStocksLeft();
                    System.out.println(stocksAdded + " + " + stocksToAdd + " <= " + maximumStocks);
                    if(!((stocksAdded + stocksToAdd) > maximumStocks))
                    {
                        toItems.get(io.getId()).setStocksLeft(stocksToAdd + stocksAdded);
                        processTableItem(table_to, dtm2, 0, toItems);
                    }
                    else mh.warning("Not enough stocks!");
                }
                else
                {
                    io.setStocksLeft(Integer.parseInt(number));
                    toItems.put(io.getId(), io);
                    processTableItem(table_to, dtm2, 0, toItems);
                }
            }
        } else mh.warning("Please select a store to transfer stocks!");
    }
    private boolean inputAllowed(ItemObject io, String input)
    {
        int value = Integer.parseInt(input == null ? "0" : input);
        int left = io.getStocksLeft();
        
        return value <= left;
    }
    private ItemObject getSelectedItem(JTable table, DefaultTableModel dtmr)
    {
        return fromItems.get(dtmr.getValueAt(table.getSelectedRow(), 0));
    }
    public void openFrame()
    {
        initComponents();
        createFromColumns();
        processFromLists();
        setupFromTable();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_apply;
    private javax.swing.JButton button_cancel;
    private javax.swing.JComboBox<String> combo_from;
    private javax.swing.JComboBox<String> combo_to;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable table_from;
    private javax.swing.JTable table_to;
    private javax.swing.JTextField textField_search;
    // End of variables declaration//GEN-END:variables
}
