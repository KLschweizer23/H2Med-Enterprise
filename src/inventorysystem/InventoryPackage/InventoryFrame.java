package inventorysystem.InventoryPackage;

import inventorysystem.MainFrame;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import myUtilities.SystemUtilities;


/**
 *
 * @author KL_Schweizer
 */
public class InventoryFrame extends javax.swing.JFrame {

    private MainFrame myFrame;
    private StoreObject selectedStoreObject = null;
    
    private DefaultTableModel dtm;
    
    private HashMap<String, ItemObject> itemList = new HashMap<>();
    
    private final String separator = ",";
    
    private boolean getFromDatabase = true;
    
    private final int rowHeight = 30;
    private int lastSelectedRow = 0;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabParent = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        label_store = new javax.swing.JLabel();
        button_configure = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_stocks = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        textField_search = new javax.swing.JTextField();
        button_undo = new javax.swing.JButton();
        button_input = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        tabParent.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        tabParent.setFocusable(false);
        tabParent.setRequestFocusEnabled(false);

        jPanel1.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Store:");
        jLabel1.setToolTipText("");
        jLabel1.setFocusable(false);
        jLabel1.setRequestFocusEnabled(false);

        label_store.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        label_store.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        label_store.setText("None");
        label_store.setToolTipText("");
        label_store.setFocusable(false);
        label_store.setRequestFocusEnabled(false);

        button_configure.setToolTipText("Configure Store");
        button_configure.setFocusable(false);
        button_configure.setRequestFocusEnabled(false);
        button_configure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_configureActionPerformed(evt);
            }
        });

        table_stocks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_stocks.setFocusable(false);
        table_stocks.setSelectionBackground(new java.awt.Color(177, 0, 0));
        table_stocks.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_stocks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_stocks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_stocks.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(table_stocks);

        jButton1.setText("Cancel");
        jButton1.setFocusable(false);
        jButton1.setRequestFocusEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Apply");
        jButton2.setFocusable(false);
        jButton2.setRequestFocusEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        textField_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textField_searchKeyReleased(evt);
            }
        });

        button_undo.setText("Undo");
        button_undo.setFocusable(false);
        button_undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_undoActionPerformed(evt);
            }
        });

        button_input.setText("Input Sold Stock");
        button_input.setFocusable(false);
        button_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_inputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(label_store)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(button_configure, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(textField_search, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_input)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button_undo))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 964, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(label_store)
                    .addComponent(button_configure, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_undo)
                    .addComponent(button_input))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tabParent.addTab("Manage", jPanel1);

        displayTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayTable.setFillsViewportHeight(true);
        displayTable.setGridColor(new java.awt.Color(51, 204, 0));
        displayTable.setMaximumSize(new java.awt.Dimension(3, 3));
        displayTable.setSelectionBackground(new java.awt.Color(204, 0, 0));
        displayTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        displayTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        displayTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(displayTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );

        tabParent.addTab("Summary", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabParent)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabParent)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_configureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_configureActionPerformed
        StoreConfigurationFrame scf = new StoreConfigurationFrame();
        scf.openFrame(myFrame, this);
        scf.setVisible(true);
        int x = (myFrame.getWidth() - scf.getWidth()) / 2;
        int y = (myFrame.getHeight() - scf.getHeight()) / 2;
        scf.setLocation(x,y);
    }//GEN-LAST:event_button_configureActionPerformed

    private void button_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_inputActionPerformed
        lastSelectedRow = table_stocks.getSelectedRow();
        inputMethod();
    }//GEN-LAST:event_button_inputActionPerformed

    private void textField_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textField_searchKeyReleased
        processStocks();
    }//GEN-LAST:event_textField_searchKeyReleased

    private void button_undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_undoActionPerformed
        undoMethod();
    }//GEN-LAST:event_button_undoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cancelMethod();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        applyButton();
    }//GEN-LAST:event_jButton2ActionPerformed
    private void applyButton()
    {
        for(String key : itemList.keySet())
        {
            ItemObject io = itemList.get(key);
            int soldStocks = Integer.parseInt(getSoldStocks(io));
            int left = io.getStocksLeft() - soldStocks;
            io.setStocksLeft(left);
        }
        cancelMethod();
    }
    private void cancelMethod()
    {
        InventoryDatabaseManager inventoryDb = new InventoryDatabaseManager();
        for(String key : itemList.keySet())
        {
            ItemObject io = itemList.get(key);
            io.setSoldHistory("null");
            inventoryDb.updateItem(selectedStoreObject.getId(), selectedStoreObject.getName(), io);
        }
        processStocks();
    }
    private void undoMethod()
    {
        String id = dtm.getValueAt(table_stocks.getSelectedRow(), 0).toString();
        ItemObject io = itemList.get(id);
        String[] soldHistory = getSoldHistory(io);
        if(soldHistory.length > 1)
        {
            String[] newSetArray = Arrays.copyOf(soldHistory, soldHistory.length - 1);
            String newSoldHistory = arrayToString(newSetArray, separator);
            io.setSoldHistory(newSoldHistory);

            InventoryDatabaseManager inventoryDb = new InventoryDatabaseManager();
            inventoryDb.updateItem(selectedStoreObject.getId(), selectedStoreObject.getName(), io);

            processStocks();
        }
    }
    private String arrayToString(String[] data, String separator)
    {
        String newString = "";
        for(String d : data)
            newString += separator + d;
        return newString.substring(1);
    }
    private void inputMethod()
    {
        if(selectedStoreObject != null)
        {
            String id = dtm.getValueAt(table_stocks.getSelectedRow(), 0).toString();

            ItemObject currentIo = itemList.get(id);
            SystemUtilities su = new SystemUtilities();
            String soldStocks = su.inputNumberUser("Input sold stocks:");
            if(soldStocks != null)
            {
                writeSoldHistory(currentIo, soldStocks);
                processStocks();
            }
        }
    }
    private void writeSoldHistory(ItemObject io, String value)
    {
        io.setSoldHistory(io.getSoldHistory() + separator + value);
        
        InventoryDatabaseManager inventoryDb = new InventoryDatabaseManager();
        inventoryDb.updateItem(selectedStoreObject.getId(), selectedStoreObject.getName(), io);
        processStocks();
    }
    private void createColumns()
    {
        dtm = new DefaultTableModel(0,0)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };
        dtm.addColumn("ID");
        dtm.addColumn("I_ID");
        dtm.addColumn("Item");
        dtm.addColumn("Article");
        dtm.addColumn("Brand");
        dtm.addColumn("Price");
        dtm.addColumn("Stocks Left");
        dtm.addColumn("Sold Stocks");
        table_stocks.setModel(dtm);
        TableColumnModel tcm = table_stocks.getColumnModel();
        table_stocks.removeColumn(tcm.getColumn(0));
        table_stocks.removeColumn(tcm.getColumn(0));
    }
    private ImageIcon getScaledImageIcon(String imageName, int height, int width)
    {
        ImageIcon imageIcon = new ImageIcon(new ImageIcon(getClass().getResource("/Images/" + imageName)).getImage());
        Image image = imageIcon.getImage();
        Image newImage = image.getScaledInstance(height, width, Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newImage);
        return imageIcon;
    }
    private void setIcons()
    {
        button_configure.setIcon(getScaledImageIcon("settings_icon.png", 20,20));
        button_configure.setContentAreaFilled(false);
    }
    public void setSelectedStore(StoreObject so)
    {
        this.selectedStoreObject = so;
        label_store.setText(selectedStoreObject.getName());
        processStocks();
    }
    private void removeData()
    {
        for(int i = table_stocks.getRowCount(); i != 0 && table_stocks.getRowCount() > 0; i--)
            dtm.removeRow(i - 1);
    }
    private void processStocks()
    {
        removeData();
        
        InventoryDatabaseManager inventoryDb = new InventoryDatabaseManager();
        SystemUtilities su = new SystemUtilities();
        if(selectedStoreObject != null)
        {
            itemList.clear();
            String keyword = textField_search.getText();
            itemList = inventoryDb.processData(selectedStoreObject.getId(), selectedStoreObject.getName(), keyword);
            
            for(String key : itemList.keySet())
            {
                ItemObject io = itemList.get(key);
                Object[] rowData = {
                    io.getId(),
                    io.getI_id(),
                    io.getItem(),
                    io.getArticle(),
                    io.getBrand(),
                    (char)8369 + " " + io.getPrice(),
                    io.getStocksLeft(),
                    getSoldStocks(io)
                };
                dtm.addRow(rowData);
            }
            if(table_stocks.getRowCount() > 0 && lastSelectedRow > table_stocks.getRowCount() - 1)
                lastSelectedRow = table_stocks.getRowCount() - 1;
            table_stocks.setRowHeight(rowHeight);
            if(table_stocks.getRowCount() > 0)
            {
                su.setCustomSelection(table_stocks, lastSelectedRow);
                String id = dtm.getValueAt(table_stocks.getSelectedRow(), 0).toString();
                processUndo(itemList.get(id));
            }
            else button_undo.setText("Undo");
        }
    }
    private void setupTable()
    {
        table_stocks.addMouseListener(new MouseListener() {
            private boolean onTable = false;
            
            @Override
            public void mouseClicked(MouseEvent e) {

            }
            @Override
            public void mousePressed(MouseEvent e) {
                mouseFunction(e);
            }
            @Override
            public void mouseReleased(MouseEvent e) {
                mouseFunction(e);
            }
            @Override
            public void mouseEntered(MouseEvent e) {
                onTable = true;
            }
            @Override
            public void mouseExited(MouseEvent e) {
                onTable = false;
            }
            private void mouseFunction(MouseEvent e)
            {
                if(onTable)
                {
                    Point p = e.getPoint();
                    int y = p.y / rowHeight;
                    if(y < dtm.getRowCount())
                    {
                        lastSelectedRow = table_stocks.getRowCount();
                        String id = dtm.getValueAt(table_stocks.getSelectedRow(), 0).toString();
                        processUndo(itemList.get(id));
                    }
                }
            }
        });
    }
    private void processUndo(ItemObject io)
    {
        String[] soldValues = getSoldHistory(io);
        int soldLength = soldValues.length - 1;
        button_undo.setText("Undo(" + soldLength + ")");
    }
    private String getSoldStocks(ItemObject io)
    {
        String[] soldValues = getSoldHistory(io);
        int total = 0;
        for(String sold : soldValues)
        {
            if(sold.equals("null")) sold = "";
            total += Integer.parseInt(sold.isBlank() ? "0" : sold);
        }
        return io.getSoldStocks() + total + "";
    }
    private String[] getSoldHistory(ItemObject io)
    {
        String soldHistory = io.getSoldHistory();
        
        return soldHistory.split(separator);
    }
    private void setupExit()
    {
        JFrame frame = this;
        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                cancelMethod();
                dispose();
            }
            
        });
    }
    public void openInventoryFrame(MainFrame mainFrame)
    {
        myFrame = mainFrame;
        initComponents();
        setIcons();
        createColumns();
        processStocks();
        setupTable();
        setupExit();
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_configure;
    private javax.swing.JButton button_input;
    private javax.swing.JButton button_undo;
    private javax.swing.JTable displayTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_store;
    private javax.swing.JTabbedPane tabParent;
    private javax.swing.JTable table_stocks;
    private javax.swing.JTextField textField_search;
    // End of variables declaration//GEN-END:variables
}
