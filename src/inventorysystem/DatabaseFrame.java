package inventorysystem;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

public class DatabaseFrame extends javax.swing.JFrame 
{
    //VARIABLES
    MainFrame myFrame;
    
    DatabaseFrame databaseFrame;
    
    Database_AddFrame addItemFrame;
    Database_AddClientFrame addClientFrame;
    Database_AddBranchFrame addBranchFrame;
    Database_AddSupplierFrame addSupplierFrame;
    Database_UpdateFrame updateItemFrame;
    Database_UpdateBranchFrame updateBranchFrame;
    Database_UpdateClientFrame updateClientFrame;
    Database_UpdateSupplierFrame updateSupplierFrame;
    
    //UNCOMMON
    DefaultTableModel dtm;
    ArrayList<String> itemIdList;
    ArrayList<String> branchIdList;
    ArrayList<String> clientIdList;
    ArrayList<Integer> supplierIdList;
    
    //SIMPLE VARIABLES
    private int selectedButtonID = 0;
    private int selectedTrueCategory = 0;
    private int selectedCategory = 0;
    private String selectedRowID = "";
    private int selectedRowNumber = 0;
    
    private int MODE_PROCESS = 0;
    private int MODE_FILTER_CATEGORY = 1;
    private int MODE_FILTER_SEARCH = 2;
    
    private int MODE_SORT = 0;
    private int MODE_UNSORT = 1;
    
    boolean ready = false;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        database_clientButton = new javax.swing.JButton();
        database_itemButton = new javax.swing.JButton();
        database_branchesButton = new javax.swing.JButton();
        database_supplierButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        database_mainTable = new javax.swing.JTable();
        database_searchBar = new javax.swing.JTextField();
        database_addButton = new javax.swing.JButton();
        database_editButton = new javax.swing.JButton();
        database_deleteButton = new javax.swing.JButton();
        categoryCombo = new javax.swing.JComboBox<>();
        supplierCombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(177, 0, 0));

        database_clientButton.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        database_clientButton.setForeground(new java.awt.Color(255, 255, 255));
        database_clientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_back.png"))); // NOI18N
        database_clientButton.setText("Clients");
        database_clientButton.setContentAreaFilled(false);
        database_clientButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        database_clientButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_hover.png"))); // NOI18N
        database_clientButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_pressed.png"))); // NOI18N
        database_clientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_clientButtonActionPerformed(evt);
            }
        });

        database_itemButton.setFont(new java.awt.Font("Arial Unicode MS", 0, 24)); // NOI18N
        database_itemButton.setForeground(new java.awt.Color(255, 255, 255));
        database_itemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_back.png"))); // NOI18N
        database_itemButton.setContentAreaFilled(false);
        database_itemButton.setFocusable(false);
        database_itemButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        database_itemButton.setLabel("Items");
        database_itemButton.setRequestFocusEnabled(false);
        database_itemButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_hover.png"))); // NOI18N
        database_itemButton.setSelected(true);
        database_itemButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_pressed.png"))); // NOI18N
        database_itemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_itemButtonActionPerformed(evt);
            }
        });

        database_branchesButton.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        database_branchesButton.setForeground(new java.awt.Color(255, 255, 255));
        database_branchesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_back.png"))); // NOI18N
        database_branchesButton.setText("Branches");
        database_branchesButton.setContentAreaFilled(false);
        database_branchesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        database_branchesButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_hover.png"))); // NOI18N
        database_branchesButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_pressed.png"))); // NOI18N
        database_branchesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_branchesButtonActionPerformed(evt);
            }
        });

        database_supplierButton.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        database_supplierButton.setForeground(new java.awt.Color(255, 255, 255));
        database_supplierButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_back.png"))); // NOI18N
        database_supplierButton.setText("Supplier");
        database_supplierButton.setContentAreaFilled(false);
        database_supplierButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        database_supplierButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_hover.png"))); // NOI18N
        database_supplierButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1_pressed.png"))); // NOI18N
        database_supplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_supplierButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(database_branchesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 226, Short.MAX_VALUE)
            .addComponent(database_itemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 226, Short.MAX_VALUE)
            .addComponent(database_clientButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(database_supplierButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(database_itemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(database_branchesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(database_clientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(database_supplierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(233, 30, 30));

        jLabel1.setBackground(new java.awt.Color(235, 235, 235));
        jLabel1.setFont(new java.awt.Font("Agency FB", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DATABASE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(387, 387, 387))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        database_mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        database_mainTable.setSelectionBackground(new java.awt.Color(177, 0, 0));
        database_mainTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        database_mainTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        database_mainTable.getTableHeader().setReorderingAllowed(false);
        database_mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                database_mainTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(database_mainTable);

        database_searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_searchBarActionPerformed(evt);
            }
        });
        database_searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                database_searchBarKeyReleased(evt);
            }
        });

        database_addButton.setText("Add");
        database_addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_addButtonActionPerformed(evt);
            }
        });

        database_editButton.setText("Edit");
        database_editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_editButtonActionPerformed(evt);
            }
        });

        database_deleteButton.setText("Delete");
        database_deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                database_deleteButtonActionPerformed(evt);
            }
        });

        categoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboActionPerformed(evt);
            }
        });

        supplierCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(database_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(database_addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(database_editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(database_deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(database_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(database_addButton)
                    .addComponent(database_editButton)
                    .addComponent(database_deleteButton)
                    .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        myFrame.setEnabled(true);
        myFrame.setAlwaysOnTop(true);
        myFrame.setAlwaysOnTop(false);
    }//GEN-LAST:event_formWindowClosing

    private void database_itemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_itemButtonActionPerformed
        database_itemButton.setSelected(true);
        database_clientButton.setSelected(false);
        database_branchesButton.setSelected(false);
        database_supplierButton.setSelected(false);
        selectedButtonID = 0;
        createColumns(selectedButtonID);
        try
        {
            updateTableData(0, MODE_FILTER_SEARCH, database_searchBar.getText(), categoryCombo.getSelectedItem().toString());
        }catch(Exception e){ShowFreakingError(e + " - Error 0017");}
    }//GEN-LAST:event_database_itemButtonActionPerformed

    private void database_clientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_clientButtonActionPerformed
        database_itemButton.setSelected(false);
        database_clientButton.setSelected(true);
        database_branchesButton.setSelected(false);
        database_supplierButton.setSelected(false);
        selectedButtonID = 2;
        createColumns(selectedButtonID);
        try
        {
            updateTableData(2, MODE_PROCESS, null, null);
        }catch(Exception e){ShowFreakingError(e + " - Error 0018");}
    }//GEN-LAST:event_database_clientButtonActionPerformed

    private void database_branchesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_branchesButtonActionPerformed
        database_itemButton.setSelected(false);
        database_clientButton.setSelected(false);
        database_branchesButton.setSelected(true);
        database_supplierButton.setSelected(false);
        selectedButtonID = 1;
        createColumns(selectedButtonID);
        try
        {
            updateTableData(1, MODE_PROCESS, null, null);
        }catch(Exception e){ShowFreakingError(e + " - Error 0019");}
    }//GEN-LAST:event_database_branchesButtonActionPerformed

    private void database_searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_searchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_database_searchBarActionPerformed

    private void database_deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_deleteButtonActionPerformed
        if(database_mainTable.getRowCount() > 0)
        {
            getSelectedIdByNumber(Integer.parseInt(dtm.getValueAt(database_mainTable.getSelectedRow(), 0).toString()));
            Object[] options = {"Confirm", "Cancel"};
            JPanel panel = new JPanel();
            panel.add(new JLabel ("Permission to Delete " + database_mainTable.getValueAt(database_mainTable.getSelectedRow(), 1)));
            int result = JOptionPane.showOptionDialog(null, panel, "Delete Row", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, null);
            if(result == JOptionPane.YES_OPTION)
            {
                try
                {
                    switch(selectedButtonID)
                    {
                        case 0:
                            ItemDatabaseManager itemDatabaseManager = new ItemDatabaseManager();
                            itemDatabaseManager.deleteData(Integer.parseInt(selectedRowID));
                            break;
                        case 1:
                            BranchDatabaseManager branchDatabaseManager = new BranchDatabaseManager();
                            branchDatabaseManager.deleteData(Integer.parseInt(selectedRowID));
                            break;
                        case 2:
                            ClientDatabaseManager clientDatabaseManager = new ClientDatabaseManager();
                            clientDatabaseManager.deleteData(Integer.parseInt(selectedRowID));
                            break;
                        case 3:
                            SupplierDatabaseManager supplierDatabaseManager = new SupplierDatabaseManager();
                            supplierDatabaseManager.deleteData(Integer.parseInt(selectedRowID));
                            break;
                    }
                    updateTableData(selectedButtonID, MODE_PROCESS, null, null);
                }catch(Exception e){ShowFreakingError(e + "");}
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No data to Delete!");
        }
    }//GEN-LAST:event_database_deleteButtonActionPerformed

    private void database_addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_addButtonActionPerformed
        switch(selectedButtonID)
        {
            case 0:
                addItemFrame = new Database_AddFrame();
                addItemFrame.openAddFrame(getSelectedCategory(), this, "");
                addItemFrame.setVisible(true);
                int x = (myFrame.getWidth() - addItemFrame.getWidth()) / 2;
                int y = (myFrame.getHeight() - addItemFrame.getHeight()) / 2;
                addItemFrame.setAlwaysOnTop(true);
                addItemFrame.setLocation(x,y);
                setEnabled(false);
                break;
            case 1:
                addBranchFrame = new Database_AddBranchFrame();
                addBranchFrame.openAddFrame(this);
                addBranchFrame.setVisible(true);
                int x2 = (myFrame.getWidth() - addBranchFrame.getWidth()) / 2;
                int y2 = (myFrame.getHeight() - addBranchFrame.getHeight()) / 2;
                addBranchFrame.setAlwaysOnTop(true);
                addBranchFrame.setLocation(x2, y2);
                setEnabled(false);
                break;
            case 2:
                addClientFrame = new Database_AddClientFrame();
                addClientFrame.openAddFrame(this);
                addClientFrame.setVisible(true);
                int x3 = (myFrame.getWidth() - addClientFrame.getWidth()) / 2;
                int y3 = (myFrame.getHeight() - addClientFrame.getHeight()) / 2;
                addClientFrame.setAlwaysOnTop(true);
                addClientFrame.setLocation(x3, y3);
                setEnabled(false);
                break;
            case 3:
                addSupplierFrame = new Database_AddSupplierFrame();
                addSupplierFrame.openAddFrame(this);
                addSupplierFrame.setVisible(true);
                int x4 = (myFrame.getWidth() - addSupplierFrame.getWidth()) / 2;
                int y4 = (myFrame.getHeight() - addSupplierFrame.getHeight()) / 2;
                addSupplierFrame.setAlwaysOnTop(true);
                addSupplierFrame.setLocation(x4, y4);
                setEnabled(false);
                break;
        }
    }//GEN-LAST:event_database_addButtonActionPerformed

    private void database_editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_editButtonActionPerformed
        if(database_mainTable.getRowCount() > 0)
        {
            getSelectedIdByNumber(Integer.parseInt(dtm.getValueAt(database_mainTable.getSelectedRow(), 0).toString()));
            switch(selectedButtonID)
            {
                case 0:
                    // <editor-fold defaultstate="collapsed" desc="Item Edit">
                    if(database_mainTable.getRowCount() > 0)
                    {
                        updateItemFrame = new Database_UpdateFrame();
                        updateItemFrame.openUpdateFrame(selectedRowID, this);
                        updateItemFrame.setVisible(true);
                        int x = (myFrame.getWidth() - updateItemFrame.getWidth()) / 2;
                        int y = (myFrame.getHeight() - updateItemFrame.getHeight()) / 2;
                        updateItemFrame.setLocation(x,y);
                        updateItemFrame.setAlwaysOnTop(true);
                        setEnabled(false);
                    }else{
                        JOptionPane.showMessageDialog(null, "No Data to Edit!");
                    }
                    break;
                    // </editor-fold>
                case 1:
                    // <editor-fold defaultstate="collapsed" desc="Branch Edit">
                    if(database_mainTable.getRowCount() > 0)
                    {
                        updateBranchFrame = new Database_UpdateBranchFrame();
                        updateBranchFrame.openUpdateFrame(selectedRowID, this);
                        updateBranchFrame.setVisible(true);
                        int x = (myFrame.getWidth() - updateBranchFrame.getWidth()) / 2;
                        int y = (myFrame.getHeight() - updateBranchFrame.getHeight()) / 2;
                        updateBranchFrame.setLocation(x,y);
                        updateBranchFrame.setAlwaysOnTop(true);
                        setEnabled(false);
                    }else{
                        JOptionPane.showMessageDialog(null, "No Data to Edit!");
                    }
                    break;
                    // </editor-fold>
                case 2:
                    //<editor-fold defaultstate="collapsed" desc="Client Edit">
                    if(database_mainTable.getRowCount() > 0)
                    {
                        updateClientFrame = new Database_UpdateClientFrame();
                        updateClientFrame.openUpdateFrame(selectedRowID, this);
                        updateClientFrame.setVisible(true);
                        int x = (myFrame.getWidth() - updateClientFrame.getWidth()) / 2;
                        int y = (myFrame.getHeight() - updateClientFrame.getHeight()) / 2;
                        updateClientFrame.setLocation(x,y);
                        updateClientFrame.setAlwaysOnTop(true);
                        setEnabled(false);
                    }else{
                        JOptionPane.showMessageDialog(null, "No Data to Edit!");
                    }
                    break;
                    //</editor-fold>
                case 3:
                    //<editor-fold defaultstate="collapsed" desc="Supplier Edit">
                    if(database_mainTable.getRowCount() > 0)
                    {
                        updateSupplierFrame = new Database_UpdateSupplierFrame();
                        updateSupplierFrame.openUpdateFrame(selectedRowID, this);
                        updateSupplierFrame.setVisible(true);
                        int x = (myFrame.getWidth() - updateSupplierFrame.getWidth()) / 2;
                        int y = (myFrame.getHeight() - updateSupplierFrame.getHeight()) / 2;
                        updateSupplierFrame.setLocation(x, y);
                        updateSupplierFrame.setAlwaysOnTop(true);
                        setEnabled(false);
                    }else{
                        JOptionPane.showMessageDialog(null, "No Data to Edit!");
                    }
                    break;
                    //</editor-fold>
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Data to Edit!");
        }
    }//GEN-LAST:event_database_editButtonActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        try
        {
            updateTableData(selectedButtonID, MODE_FILTER_SEARCH, database_searchBar.getText(), categoryCombo.getSelectedItem().toString());
        }catch(Exception e){ShowFreakingError(e + " - Error 0020");}
    }//GEN-LAST:event_formWindowGainedFocus

    private void database_mainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_database_mainTableMouseClicked
        selectedRowNumber = database_mainTable.getSelectedRow();
    }//GEN-LAST:event_database_mainTableMouseClicked

    private void categoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboActionPerformed
        if(ready)
        {
            selectedTrueCategory = categoryCombo.getSelectedIndex();
            if(categoryCombo.getSelectedIndex() != 0)
                selectedCategory = categoryCombo.getSelectedIndex() - 1;
            else
                selectedCategory = 0;
            try
            {
                updateTableData(selectedButtonID, MODE_FILTER_SEARCH, database_searchBar.getText(), categoryCombo.getSelectedItem().toString());
            }catch(Exception e){ShowFreakingError(e + " - Error 0021");}
        }
    }//GEN-LAST:event_categoryComboActionPerformed

    private void database_searchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_database_searchBarKeyReleased
        String keyword = database_searchBar.getText();
        try
        {
            updateTableData(selectedButtonID, MODE_FILTER_SEARCH, keyword, categoryCombo.getSelectedItem().toString());
        }catch(Exception e){ShowFreakingError(e + " - Error 0022");}
    }//GEN-LAST:event_database_searchBarKeyReleased

    private void database_supplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_database_supplierButtonActionPerformed
        database_itemButton.setSelected(false);
        database_clientButton.setSelected(false);
        database_branchesButton.setSelected(false);
        database_supplierButton.setSelected(true);
        selectedButtonID = 3;
        createColumns(selectedButtonID);
        try
        {
            updateTableData(3, MODE_PROCESS, null, null);
        }catch(Exception e){ShowFreakingError(e + " - Error 0019");}
    }//GEN-LAST:event_database_supplierButtonActionPerformed

    private void supplierComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboActionPerformed
        String keyword = database_searchBar.getText();
        try
        {
            updateTableData(selectedButtonID, MODE_FILTER_SEARCH, keyword, categoryCombo.getSelectedItem().toString());
        }catch(Exception e){ShowFreakingError(e + " - Error 0041");}
    }//GEN-LAST:event_supplierComboActionPerformed

    public void createColumns(int id)
    {
        //dtm = (DefaultTableModel) database_mainTable.getModel();
        dtm = new DefaultTableModel(0,0)
        {
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };
        database_mainTable.setModel(dtm);
        switch(id)
        {
            case 0:
                dtm.addColumn("No.");
                dtm.addColumn("Item");
                dtm.addColumn("Brand");
                dtm.addColumn("Article");
                dtm.addColumn("Supplier");
                dtm.addColumn("Quantity");
                dtm.addColumn("Cost");
                dtm.addColumn("Price");
                dtm.addColumn("Category");
                dtm.addColumn("Purchase Date");
                dtm.addColumn("Expiration Date");
                break;
            case 1:
                dtm.addColumn("Branch No.");
                dtm.addColumn("Name");
                dtm.addColumn("Address");
                break;
            case 2:
                dtm.addColumn("Client No.");
                dtm.addColumn("Name");
                dtm.addColumn("Address");
                dtm.addColumn("Contact Info");
                break;
            case 3:
                dtm.addColumn("Supplier No.");
                dtm.addColumn("Name");
                dtm.addColumn("Address");
                dtm.addColumn("Contact Info");
                break;
        }
    }
    /**
     *
     * @param id
     * @throws Exception
     */
    public void updateTableData(int id, int mode, String keyword, String category) throws Exception
    {
        switch(id)
        {
                 
            case 0:
                // <editor-fold defaultstate="collapsed" desc="Items Code">
                ItemDatabaseManager itemDatabaseManager = new ItemDatabaseManager();
                categoryCombo.setEnabled(true);
                database_searchBar.setEnabled(true);
                supplierCombo.setEnabled(true);
                
                if(mode == MODE_PROCESS)
                    itemDatabaseManager.processAllData(MODE_UNSORT);
                else if(mode == MODE_FILTER_CATEGORY)
                    itemDatabaseManager.filterByCategory(goodString(categoryCombo.getItemAt(selectedTrueCategory)), goodString(supplierCombo.getSelectedItem().toString()), MODE_UNSORT);
                else if(mode == MODE_FILTER_SEARCH)
                    itemDatabaseManager.filterBySearch(goodString(keyword), goodString(category), goodString(supplierCombo.getSelectedItem().toString()), MODE_UNSORT);
                
                itemIdList = itemDatabaseManager.getItemIdList();
                ArrayList<String> itemNameList = itemDatabaseManager.getItemNameList();
                ArrayList<String> itemCategoryList = itemDatabaseManager.getItemCategoryList();
                ArrayList<Double> itemQuantityList = itemDatabaseManager.getItemQuantityList();
                ArrayList<Double> itemCostList = itemDatabaseManager.getItemCostList();
                ArrayList<Double> itemPriceList = itemDatabaseManager.getItemPriceList();
                ArrayList<Double> itemStockOutList = itemDatabaseManager.getItemStockOutList();
                ArrayList<Date> itemPurchaseDateList = itemDatabaseManager.getItemPurchaseDateList();
                ArrayList<Date> itemExpirationDateList = itemDatabaseManager.getItemExpirationDateList();
                ArrayList<String> itemSupplierList = itemDatabaseManager.getItemSupplierList();
                ArrayList<String> itemBrandList = itemDatabaseManager.getItemBrandList();
                ArrayList<String> itemArticleList = itemDatabaseManager.getItemArticleList();

                dtm.setRowCount(0);

                for(int i = 0; i < itemIdList.size(); i++)
                {
                    String [] rowData = {
                        i + 1 + "", itemNameList.get(i), itemBrandList.get(i), itemArticleList.get(i), itemSupplierList.get(i),
                        itemQuantityList.get(i).toString(), (char)8369 + " " + itemCostList.get(i).toString(),(char)8369 + " " + itemPriceList.get(i).toString(), itemCategoryList.get(i),
                        checkDate(itemPurchaseDateList.get(i).toString()), checkDate(itemExpirationDateList.get(i).toString())
                    };
                    dtm.addRow(rowData);
                }
                break;
                //</editor-fold>
            case 1:
                // <editor-fold defaultstate="collapsed" desc="Branches Code">
                BranchDatabaseManager branchDatabaseManager = new BranchDatabaseManager();
                categoryCombo.setEnabled(false);
                supplierCombo.setEnabled(false);
                database_searchBar.setEnabled(false);
                
                branchDatabaseManager.processAllData();
                branchIdList = branchDatabaseManager.getBranchIdList();
                ArrayList<String> branchNameList = branchDatabaseManager.getBranchNameList();
                ArrayList<String> branchAddressList = branchDatabaseManager.getBranchAddressList();

                dtm.setRowCount(0);

                for(int i = 0; i < branchIdList.size(); i++)
                {
                    String [] rowData = {i + 1 + "", branchNameList.get(i), branchAddressList.get(i)};
                    dtm.addRow(rowData);
                }
                break;
                //</editor-fold>
            case 2:
                //<editor-fold defaultstate="collapsed" desc="Client Code">
                ClientDatabaseManager clientDatabaseManager = new ClientDatabaseManager();
                database_searchBar.setEnabled(false);
                categoryCombo.setEnabled(false);
                supplierCombo.setEnabled(false);
                
                clientDatabaseManager.processAllData();
                clientIdList = clientDatabaseManager.getClientIdList();
                ArrayList<String> clientNameList = clientDatabaseManager.getClientNameList();
                ArrayList<String> clientAddressList = clientDatabaseManager.getClientAddressList();
                ArrayList<String> clientContactList = clientDatabaseManager.getClientContactList();

                dtm.setRowCount(0);

                for(int i = 0; i < clientIdList.size(); i++)
                {
                    String [] rowData = {i + 1 + "", clientNameList.get(i), clientAddressList.get(i), clientContactList.get(i)};
                    dtm.addRow(rowData);
                }
                break;
                //</editor-fold>
            case 3:
                //<editor-fold defaultstate="collapsed" desc="Supplier Code">
                SupplierDatabaseManager supplierDatabaseManager = new SupplierDatabaseManager();
                database_searchBar.setEnabled(false);
                categoryCombo.setEnabled(false);
                supplierCombo.setEnabled(false);
                
                supplierDatabaseManager.processAllData();
                supplierIdList = supplierDatabaseManager.getIdList();
                ArrayList<String> supplierNameList = supplierDatabaseManager.getNameList();
                ArrayList<String> supplierAddressList = supplierDatabaseManager.getAddressList();
                ArrayList<String> supplierContactList = supplierDatabaseManager.getContactInfoList();
                
                dtm.setRowCount(0);

                for(int i = 0; i < supplierIdList.size(); i++)
                {
                    String [] rowData = {i + 1 + "", supplierNameList.get(i), supplierAddressList.get(i), supplierContactList.get(i)};
                    dtm.addRow(rowData);
                }
                break;
                //</editor-fold>
        }
        resizeColumnWidth(database_mainTable);
        if(database_mainTable.getRowCount() >= 1)
        {
            database_mainTable.setRowSelectionInterval(0, 0);
        }
        database_mainTable.setRowHeight(30);
        setupTable(database_mainTable, Color.white, new Dimension(0,30), Color.black);
    }
    private String goodString(String data)
    {
        String temp = data.replaceAll("'", "\\\\'");
        return temp;
    }
    private String checkDate(String s)
    {
        String goodDate = s;
        if(s.equals("2000-01-01"))
            goodDate = "Not Available";
        return goodDate;
    }
    public void getSelectedIdByNumber(int number)
    {
        boolean found = false;
        
        switch(selectedButtonID)
        {
            case 0:
                for(int i = 0; i < itemIdList.size(); i++)
                {
                    if(number == i+1)
                    {
                        selectedRowID = itemIdList.get(i);
                        found = true;
                        break;
                    }
                }
                break;
            case 1:
                for(int i = 0; i < branchIdList.size(); i++)
                {
                    if(number == i + 1)
                    {
                        selectedRowID = branchIdList.get(i);
                        found = true;
                        break;
                    }
                }
                break;
            case 2:
                for(int i = 0; i < clientIdList.size(); i++)
                {
                    if(number == i + 1)
                    {
                        selectedRowID = clientIdList.get(i);
                        found = true;
                        break;
                    }
                }
                break;
            case 3:
                for(int i = 0; i < supplierIdList.size(); i++)
                {
                    if(number == i + 1)
                    {
                        selectedRowID = supplierIdList.get(i) + "";
                        found = true;
                        break;
                    }
                }
                break;
        }
        
        if(!found)
            selectedRowID = "";
    }
    public String getSelectedID()
    {
        return selectedRowID;
    }
    public int getSelectedCategory()
    {
        return selectedCategory;
    }
    private void updateComboBox()
    {
        ArrayList<String> listOfCat = new ArrayList<>();
        listOfCat.clear();
        listOfCat.add("All");
        listOfCat.add("Medicine");
        listOfCat.add("Medical Supplies");
        listOfCat.add("Office Supplies");
        listOfCat.add("Janitorial Supplies");
        listOfCat.add("General Merchandise");
        listOfCat.add("Foods");
        listOfCat.add("Laboratory Supplies");
        for(int i = 0; i <listOfCat.size(); i++)
        {
            categoryCombo.addItem(listOfCat.get(i));
        }
    }
    private void updateComboBox2()
    {
        ArrayList<String> listOfSupplier = new ArrayList<>();
        listOfSupplier.clear();
        SupplierDatabaseManager supplierDb = new SupplierDatabaseManager();
        try
        {
            supplierDb.processAllData();
        }catch(Exception e){ShowFreakingError(e + " - Error 0040");}
        
        ArrayList<String> suppliers = supplierDb.getNameList();
        supplierCombo.addItem("None");
        for(int i = 0; i < suppliers.size(); i++)
            supplierCombo.addItem(suppliers.get(i));
    }
    public void resizeColumnWidth(JTable table) 
    {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) 
        {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) 
            {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width +1 , width);
            }
            if(width > 300)
                width=300;
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }    
    private void setupTable(JTable table, Color background, Dimension dim, Color foreground)
    {
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(background);
        headerRenderer.setPreferredSize(dim);
        headerRenderer.setForeground(foreground);
        
        for (int i = 0; i < table.getModel().getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
    }
    public void openDatabaseFrame(MainFrame mainFrame)
    {
        myFrame = mainFrame;
        initComponents();
        createColumns(selectedButtonID);
        updateComboBox();
        updateComboBox2();
        categoryCombo.setEnabled(true);
        try
        {
            updateTableData(selectedButtonID, MODE_PROCESS, null, null);
        }catch(Exception e){ShowFreakingError(e + " - Error 0016");}
        database_searchBar.requestFocus();
        ready = true;
    }
    public void ShowFreakingError(String message)
    {
        JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
        System.exit(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> categoryCombo;
    private javax.swing.JButton database_addButton;
    private javax.swing.JButton database_branchesButton;
    private javax.swing.JButton database_clientButton;
    private javax.swing.JButton database_deleteButton;
    private javax.swing.JButton database_editButton;
    private javax.swing.JButton database_itemButton;
    private javax.swing.JTable database_mainTable;
    private javax.swing.JTextField database_searchBar;
    private javax.swing.JButton database_supplierButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> supplierCombo;
    // End of variables declaration//GEN-END:variables
}

